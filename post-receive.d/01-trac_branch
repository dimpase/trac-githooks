#!/usr/bin/env python

from __future__ import print_function

import pygit2

# putting the trac password in another file so that this file can be share publicly
from trac_password import TRAC_PASSWORD
TRAC_USER = 'git'

TRAC_URL = 'http://trac.sagemath.org'
REALM = 'sage.math.washington.edu'
MASTER_BRANCHES = {'develop', 'master'}

GIT_BASE_URL      = 'http://git.sagemath.org/sage.git/'
GIT_COMMIT_URL    = GIT_BASE_URL + 'commit/?id={commit}'

# these specify the sizes of the commit tables
MAX_NEW_COMMITS = 10

#### this script assumes that you have the following in your trac.ini
#
# [ticket-custom]
# branch = text
# branch.label = Branch
# commit = text
# commit.label = Commit
#
# [ticket-workflow]
# back_to_review = positive_review -> needs_review
# back_to_review.name = resubmit to review
# back_to_review.permissions = TICKET_MODIFY
# ...

import os
import sys
import subprocess
import copy

try:  # py3
    from xmlrpc.client import ServerProxy
except ImportError:  # python 2.x
    from xmlrpclib import ServerProxy

class Trac(object):
    
    def __init__(self, username, password, **kwds):
        self._rpc = None
        self._login = (username, password, kwds.get('realm', REALM))
        self._cache = dict()
        self.url = kwds.get('url', TRAC_URL)

    @property
    def rpc(self):
        if self._rpc is None:
            import digest_transport, urlparse
            self._rpc = ServerProxy(urlparse.urljoin(self.url, 'xmlrpc'),
                    transport=digest_transport.DigestTransport())
        return self._rpc

    @property
    def login(self):
        if isinstance(self._login, tuple):
            import digest_transport, os, urllib, urlparse
            transport = digest_transport.DigestTransport()
            username, password, realm = self._login
            transport.add_authentication(realm=realm, url=self.url, username=username, password=password)
            url = urlparse.urljoin(self.url,
                    urllib.pathname2url(os.path.join('login', 'xmlrpc')))
            self._login = ServerProxy(url, transport=transport)
        return self._login
            

    def ticket_iter(self, branch):
        for result in self.rpc.search.branch(branch):
            ticket_number = result[0]
            yield self.get(ticket_number)
        
    def get(self, ticket_number):
        try:
            return self._cache[ticket_number]
        except KeyError:
            result = self.rpc.ticket.get(ticket_number)
            assert result[0] == ticket_number
            output = (ticket_number, result[3])
            self._cache[ticket_number] = output
            return output
   
    @property
    def _git(self):
        try:
            return self.__git
        except AttributeError:
            self.__git = pygit2.Repository('.')
            return self.__git

    def log_table(self, new_commit, limit=float('inf'), ignore=MASTER_BRANCHES):
        walker = self._git.walk(self._git[new_commit].oid,
                pygit2.GIT_SORT_TOPOLOGICAL | pygit2.GIT_SORT_TIME)

        for b in ignore:
            c = self._git.lookup_branch(b)
            if c is None:
                c = self._git.get(b)
            else:
                c = c.get_object()
            if c is not None:
                walker.hide(c.oid)

        table = []

        for commit in walker:
            if len(table) >= limit:
                break
            short_sha1 = commit.hex[:7]
            title = commit.message.splitlines()
            if title:
                title = title[0]
            else:
                title = u''
            table.append(
                    u'||[%s %s]||{{{%s}}}||'%(
                        GIT_COMMIT_URL.format(commit=commit.hex),
                        short_sha1,
                        title))
        table.reverse()
        return table

    def is_ancestor_of(self, a, b):
        if a == '0'*40:
            return True
        a = self._git[a].oid; b = self._git[b].oid
        return self._git.merge_base(a, b) == a

    def update_commit(self, number, ticket, branch, oldrev, newrev):
        if ticket['status'] == 'closed': # don't continue to update closed tickets
            return
        if ticket.get('commit') == newrev:
            print('Commit {0} is already listed on trac ticket {1}, doing nothing.'.format(newrev[:6], number))
            return
        elif newrev == '0'*40:
            print('Warning, deleting branch that is attached to trac ticket {0}'.format(number))
            return
        # ts = time stamp. If we send back a timestamp too far in the
        # future then the server will reply with "Sorry, can not save
        # your changes. This ticket has been modified by someone else
        # since you started'"
        attributes = {'_ts': ticket['_ts'], 'commit':newrev}
        comment = u'Branch pushed to git repo; I updated commit sha1'
        if ticket['status'] == 'positive_review':
            attributes['action'] = 'back_to_review'
            comment += u' and set ticket back to needs_review'
            print('Trac #{0}: Commit changed to {1}, setting ticket back to needs_review.'.format(
                number, newrev[:6]))
        else:
            print('Trac #{0}: Commit changed to {1}.'.format(number, newrev[:6]))
        comment += u'. '
        if not self.is_ancestor_of(oldrev, newrev):
            comment += u'This was a forced push. '
        ignore = copy.copy(MASTER_BRANCHES)
        ignore.discard(branch)
        if oldrev != '0'*40:
            ignore.add(oldrev)
        table = self.log_table(newrev, ignore=ignore)
        if len(table) > MAX_NEW_COMMITS:
            comment += u'Last {0} new commits:\n'.format(MAX_NEW_COMMITS)
            table = table[:MAX_NEW_COMMITS]
        else:
            comment += u'New commits:\n'
        comment += u'\n'.join(table)
        self.login.ticket.update(number, comment, attributes, True)

if __name__ == '__main__':
    trac = Trac(TRAC_USER, TRAC_PASSWORD)
    for line in sys.stdin.readlines():
        oldrev, newrev, refname = line.split()
        if not refname.startswith('refs/heads/'):
            continue
        branch = refname.split('/', 2)[-1]
        #print('pushing to branch {0}, new head commit is {1}'.format(branch, newrev[:6]))
        for number, ticket in trac.ticket_iter(branch):
            trac.update_commit(number, ticket, branch, oldrev, newrev)
