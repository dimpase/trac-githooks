#!/usr/bin/env python

from __future__ import print_function

# putting the trac password in another file so that this file can be share publicly
from trac_password import TRAC_PASSWORD
TRAC_USER = 'git'

TRAC_URL = 'http://trac.sagemath.org'
REALM = 'sage.math.washington.edu'
MASTER_BRANCHES = {'master'}

# these specify the sizes of the commit tables
MAX_NEW_COMMITS = 10
FORCED_COMMITS = 5

#### this script assumes that you have the following in your trac.ini
#
# [ticket-custom]
# branch = text
# branch.label = Branch
# commit = text
# commit.label = Commit
#
# [ticket-workflow]
# back_to_review = positive_review -> needs_review
# back_to_review.name = resubmit to review
# back_to_review.permissions = TICKET_MODIFY
# ...

import os
import sys
import subprocess
import copy

try:  # py3
    from xmlrpc.client import ServerProxy
except ImportError:  # python 2.x
    from xmlrpclib import ServerProxy


class Trac(object):
    
    def __init__(self, username, password, **kwds):
        self._rpc = None
        self._login = (username, password, kwds.get('realm', REALM))
        self._cache = dict()
        self.url = kwds.get('url', TRAC_URL)

    @property
    def rpc(self):
        if self._rpc is None:
            import digest_transport, urlparse
            self._rpc = ServerProxy(urlparse.urljoin(self.url, 'xmlrpc'),
                    transport=digest_transport.DigestTransport())
        return self._rpc

    @property
    def login(self):
        if isinstance(self._login, tuple):
            import digest_transport, os, urllib, urlparse
            transport = digest_transport.DigestTransport()
            username, password, realm = self._login
            transport.add_authentication(realm=realm, url=self.url, username=username, password=password)
            url = urlparse.urljoin(self.url,
                    urllib.pathname2url(os.path.join('login', 'xmlrpc')))
            self._login = ServerProxy(url, transport=transport)
        return self._login
            

    def ticket_iter(self, branch):
        for result in self.rpc.search.branch(branch):
            ticket_number = result[0]
            yield self.get(ticket_number)
        
    def get(self, ticket_number):
        try:
            return self._cache[ticket_number]
        except KeyError:
            result = self.rpc.ticket.get(ticket_number)
            assert result[0] == ticket_number
            output = (ticket_number, result[3])
            self._cache[ticket_number] = output
            return output
    
    def log_table(self, new_commit, limit=None, ignore=MASTER_BRANCHES):
        git_cmd = ['git', 'log', '--oneline']
        if limit is not None:
            git_cmd.append('--max-count={0}'.format(limit))
        git_cmd.append(new_commit)
        for branch in ignore:
            git_cmd.append('^{0}'.format(branch))
        log = subprocess.check_output(git_cmd)
        table = []
        for line in log.splitlines():
            short_sha1 = line[:7]
            title = line[8:]
            table.append('||[changeset:{0}]||{1}||'.format(short_sha1, title))
        return table

    def is_ancestor_of(self, a, b):
        return a == '0'*40 or a == subprocess.check_output(['git', 'merge-base', a, b]).strip()

    def update_commit(self, number, ticket, branch, oldref, newref):
        if ticket.get('commit') == newref:
            print('Commit {0} is already listed on trac ticket {1}, doing nothing.'.format(newref[:6], number))
            return
        elif newref == '0'*40:
            print('Warning, deleting branch that is attached to trac ticket {0}'.format(number))
            return
        # ts = time stamp. If we send back a timestamp too far in the
        # future then the server will reply with "Sorry, can not save
        # your changes. This ticket has been modified by someone else
        # since you started'"
        attributes = {'_ts': ticket['_ts'], 'commit':newref}
        comment = 'Branch pushed to git repo; I updated commit sha1'
        if ticket['status'] == 'positive_review':
            attributes['action'] = 'back_to_review'
            comment += ' and set ticket back to needs_review'
            print('Trac #{0}: Commit changed to {1}, setting ticket back to needs_review.'.format(
                number, newref[:6]))
        else:
            print('Trac #{0}: Commit changed to {1}.'.format(number, newref[:6]))
        comment += '. '
        if self.is_ancestor_of(oldref, newref):
            ignore = copy.copy(MASTER_BRANCHES)
            ignore.discard(branch)
            if oldref != '0'*40:
                ignore.add(oldref)
            table = self.log_table(newref, ignore=ignore)
            if len(table) > MAX_NEW_COMMITS:
                comment += 'Last {0} new commits:\n'.format(MAX_NEW_COMMITS)
                table = table[:MAX_NEW_COMMITS]
            else:
                comment += 'New commits:\n'
            comment += '\n'.join(table)
        else:
            comment += 'This was a forced push. Recent commits:\n'
            comment += '\n'.join(self.log_table(newref, limit=FORCED_COMMITS))
        self.login.ticket.update(number, comment, attributes, True)


if __name__ == '__main__':
    trac = Trac(TRAC_USER, TRAC_PASSWORD)
    for line in sys.stdin.readlines():
        oldref, newref, refname = line.split()
        if not refname.startswith('refs/heads/'):
            continue
        branch = refname.split('/', 2)[-1]
        #print('pushing to branch {0}, new head commit is {1}'.format(branch, newref[:6]))
        for number, ticket in trac.ticket_iter(branch):
            trac.update_commit(number, ticket, branch, oldref, newref)
